#pragma once

#include <vector>
#include <conio.h>
#include <iostream>
using namespace std;

class Maps {
public:
    Maps() = default;
public:
    void printMap(int , int ,int ) ;

    bool replace(int,int,int) ;

    char at(int, int, int);
    void fillMap() {
        m_map.push_back({
                                {'#', '#', '#', '#', '#', '#', '#', '#'},
                                {'#', '.', '$', '.', '.', '.', '.', '#'},
                                {'#', '.', '.', '.', '.', '.', '.', '#'},
                                {'#', '.', '.', '.', '.', '$', '.', '#'},
                                {'#', '.', '.', '.', '.', '.', '.', '#'},
                                {'#', '.', '$', '.', '.', '.', '>', '#'},
                                {'#', '#', '#', '#', '#', '#', '#', '#'}
                        });

        m_map.push_back({
                                {'#', '#', '#', '#', '#', '#', '#', '#'},
                                {'#', '.', '.', '.', '.', '.', '.', '#'},
                                {'#', '.', '.', '.', '.', '.', '.', '#'},
                                {'#', '.', '.', '.', '.', '$', '.', '#'},
                                {'#', '.', '.', '.', '.', '.', '.', '#'},
                                {'#', '$', '.', '.', '.', '.', '>', '#'},
                                {'#', '#', '#', '#', '#', '#', '#', '#'}
                        });

        m_map.push_back({
                                {'#', '#', '#', '#', '#', '#', '#', '#'},
                                {'#', '.', '.', '.', '.', '.', '.', '#'},
                                {'#', '.', '.', '.', '.', '.', '.', '#'},
                                {'#', '.', '.', '.', '.', '$', '.', '#'},
                                {'#', '.', '.', '.', '.', '.', '.', '#'},
                                {'#', '$', '.', '.', '.', '.', '>', '#'},
                                {'#', '#', '#', '#', '#', '#', '#', '#'}
                        });

    }

    bool checklvl(int,int,int) ;
private:
    std::vector<std::vector<std::vector<char>>> m_map;

};
